# Pie charts
ggplot(test2, aes(x="", y=Freq, fill=Var1)) +
geom_bar(stat="identity", width=1) +
coord_polar("y", start=0)
# Pie charts
ggplot(t3, aes(x="", y=Freq, fill=Var1)) +
geom_bar(stat="identity", width=1) +
coord_polar("y", start=0)
# Pie charts
ggplot(t3, aes(x="", y=Freq, fill=Var1)) +
geom_bar(stat="identity", width=1) +
coord_polar("y", start=0) +
theme_void() # remove background, grid, numeric labels
t3 <- as.data.frame(table(test2$work_home1, exclude = NULL)) %>%
rename(response = "Var1")
t4 <- as.data.frame(table(test2$work_home2, exclude = NULL)) %>% rename(response = "Var1")
t5 <- as.data.frame(table(test2$work_home3, exclude = NULL)) %>% rename(response = "Var1")
p1 <- ggplot(t3, aes(x="", y=Freq, fill=Var1)) +
geom_bar(stat="identity", width=1) +
coord_polar("y", start=0) +
ggtitle("Are you currently working from home related to COVID-19?") +
theme_void() # remove background, grid, numeric labels
p2 <- ggplot(t4, aes(x="", y=Freq, fill=Var1)) +
geom_bar(stat="identity", width=1) +
coord_polar("y", start=0) +
ggtitle("Has your work sent you home for any reason related to COVID-19?") +
theme_void() # remove background, grid, numeric labels
p3 <- ggplot(t5, aes(x="", y=Freq, fill=Var1)) +
geom_bar(stat="identity", width=1) +
coord_polar("y", start=0) +
ggtitle("If you are still working from outside home, would you want to work from home if possible? ") +
theme_void() # remove background, grid, numeric labels
library(cowplot)
p <- plot_grid(p1, p2, p3, nrow = 3)
p
t3 <- as.data.frame(table(test2$work_home1, exclude = NULL)) %>%
rename(response = "Var1")
t4 <- as.data.frame(table(test2$work_home2, exclude = NULL)) %>% rename(response = "Var1")
t5 <- as.data.frame(table(test2$work_home3, exclude = NULL)) %>% rename(response = "Var1")
# Pie charts
p1 <- ggplot(t3, aes(x="", y=Freq, fill=response)) +
geom_bar(stat="identity", width=1) +
coord_polar("y", start=0) +
ggtitle("Are you currently working from home related to COVID-19?") +
theme_void() # remove background, grid, numeric labels
p2 <- ggplot(t4, aes(x="", y=Freq, fill=response)) +
geom_bar(stat="identity", width=1) +
coord_polar("y", start=0) +
ggtitle("Has your work sent you home for any reason related to COVID-19?") +
theme_void() # remove background, grid, numeric labels
p3 <- ggplot(t5, aes(x="", y=Freq, fill=response)) +
geom_bar(stat="identity", width=1) +
coord_polar("y", start=0) +
ggtitle("If you are still working from outside home, would you want to work from home if possible? ") +
theme_void() # remove background, grid, numeric labels
library(cowplot)
p <- plot_grid(p1, p2, p3, nrow = 3)
p
p1 <- ggplot(t3, aes(x="", y=Freq, fill=response)) +
geom_bar(stat="identity", width=1) +
coord_polar("y", start=0) +
ggtitle("Are you currently working from home related to COVID-19?") +
theme_void() # remove background, grid, numeric labels
p2 <- ggplot(t4, aes(x="", y=Freq, fill=response)) +
geom_bar(stat="identity", width=1) +
coord_polar("y", start=0) +
ggtitle("Has your work sent you home for any reason related to COVID-19?") +
theme_void() # remove background, grid, numeric labels
p3 <- ggplot(t5, aes(x="", y=Freq, fill=response)) +
geom_bar(stat="identity", width=1) +
coord_polar("y", start=0) +
ggtitle("If you are still working from outside home,\nwould you want to work from home if possible? ") +
theme_void() # remove background, grid, numeric labels
library(cowplot)
p <- plot_grid(p1, p2, p3, nrow = 3)
p
# Knitr options
knitr::opts_chunk$set(echo = FALSE, warnings = FALSE, message = FALSE)
# Save plots or not
save_plots <- FALSE  # if you want to generate new plots make TRUE
# Libraries
library(here)         # relative paths
library(tidyverse)    # tidy functions
library(knitr)        # knit functions
library(kableExtra)   # extra markdown functions
library(lsr)          # cohenD()
library(broom.mixed)  # tidy()
library(AICcmodavg)   # predictSE()
library(cowplot)      # plot_grid()
library(ggrepel)      # geom_text_repel
# Specify relative pathing
dir_analysis <- here() # should be where analysis script is stored
dir_parent <- dir_analysis %>% str_remove("/Analysis")
dir_data <- paste0(dir_parent, "/Data")
dir_graphs <- paste0(dir_parent, "/Graphs")
# Load data
df <- read_csv(paste0(dir_data, "/covid_intervention.csv"))
# Glimpse of data
head(df) %>%
kable(caption = "Data glimpse") %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"))
library(readr)
covid_fear <- read_csv("~/Dropbox (Brown)/JOEY/Covid Research/covid_emotions/Data/Clean/covid_fear.csv")
View(covid_fear)
df2 <- df %>%
left_join(., covid_fear %>% select(sub, mean_covid_fear), by = "sub")
View(df2)
library(nlme)
covid_fear_scale = as.numeric(scale(mean_covid_fear))
df2 <- df %>%
left_join(., covid_fear %>% select(sub, mean_covid_fear), by = "sub")
fig2_data <- df2 %>%
mutate(willingness_scale = as.numeric(scale(willingness)),
change_scale = as.numeric(scale(change)),
valence_scale = as.numeric(scale(valence, center = F)),               # scale but not mean-center (0 = neutral)
arousal_scale = as.numeric(scale(arousal, center = F)),               # scale but not mean-center (0 = neutral)
extraversion_scale = as.numeric(scale(bfi_extraversion, center = T)), # scale and mean-center (0 = average)
neuroticism_scale = as.numeric(scale(bfi_neuroticism, center = T)),   # scale and mean-center (0 = average)
intervention = fct_relevel(intervention, "threat", "prosocial"),      # reference point threat
intervention_opp = fct_relevel(intervention, "prosocial", "threat"),  # reference point prosocial
covid_fear_scale = as.numeric(scale(mean_covid_fear))
fig2_data <- df2 %>%
mutate(willingness_scale = as.numeric(scale(willingness)),
change_scale = as.numeric(scale(change)),
valence_scale = as.numeric(scale(valence, center = F)),               # scale but not mean-center (0 = neutral)
arousal_scale = as.numeric(scale(arousal, center = F)),               # scale but not mean-center (0 = neutral)
extraversion_scale = as.numeric(scale(bfi_extraversion, center = T)), # scale and mean-center (0 = average)
neuroticism_scale = as.numeric(scale(bfi_neuroticism, center = T)),   # scale and mean-center (0 = average)
intervention = fct_relevel(intervention, "threat", "prosocial"),      # reference point threat
intervention_opp = fct_relevel(intervention, "prosocial", "threat"),  # reference point prosocial
covid_fear_scale = as.numeric(scale(mean_covid_fear)))
m_fig2 <- nlme::lme(willingness_scale ~ intervention*valence_scale*covid_fear_scale + intervention*arousal_scale*covid_fear_scale, random = ~ 1 + intervention| sub,
data = fig2_data)
summary(m_fig2)
test <- lme(willingness_scale ~ valence_scale*covid_fear_scale + arousal_scale*covid_fear_scale, random = ~ 1 + intervention| sub,
data = fig2_data %>% filter(intervention == "threat"))
t <- fig2_data %>% filter(intervention == "threat")
test <- lme(willingness_scale ~ valence_scale*covid_fear_scale + arousal_scale*covid_fear_scale, random = ~ 1| sub,
data = fig2_data %>% filter(intervention == "threat"))
summary(test)
fits <- predict(test)
fits
test$fits <- predict(test)
ggplot(test, aes(x = valence_scale, y = fits)) +
geom_point() +
geom_line()
t <- fig2_data %>% filter(intervention == "threat")
test <- lme(willingness_scale ~ valence_scale*covid_fear_scale + arousal_scale*covid_fear_scale, random = ~ 1| sub,
data = fig2_data %>% filter(intervention == "threat"))
summary(test)
t$fits <- predict(test)
ggplot(t, aes(x = valence_scale, y = fits)) +
geom_point() +
geom_line()
ggplot(t, aes(x = valence_scale, y = fits)) +
geom_point() +
geom_line() +
geom_smooth(method = "lm")
range_valence <- range(t$valence_scale) # fig2_data already defined previously
range_arousal <- range(t$arousal_scale)
range_covid_fear <- range(t$covid_fear_scale)
xRange1 <- seq(range_valence[1], range_valence[2], by = .1)
xRange2 <- seq(range_arousal[1], range_arousal[2], by = .1)
xRange3 <- seq(range_covid_fear[1], range_covid_fear[2], by = .1)
v_pred <- with(t, expand.grid(valence_scale = xRange1, arousal_scale = 0, covid_fear_scale = xRange3))
v_pred <- with(t, expand.grid(valence_scale = 0, arousal_scale = xRange2, covid_fear_scale = xRange3))
v_results <- AICcmodavg::predictSE(test, newdata = v_pred)
a_results <- AICcmodavg::predictSE(test, newdata = a_pred)
v_pred$fit <- v_results$fit
v_pred$se <- v_results$se.fit
a_pred$fit <- a_results$fit
a_pred$se <- a_results$se.fit
v_pred <- with(t, expand.grid(valence_scale = xRange1, arousal_scale = 0, covid_fear_scale = xRange3))
a_pred <- with(t, expand.grid(valence_scale = 0, arousal_scale = xRange2, covid_fear_scale = xRange3))
v_results <- AICcmodavg::predictSE(test, newdata = v_pred)
a_results <- AICcmodavg::predictSE(test, newdata = a_pred)
v_pred$fit <- v_results$fit
v_pred$se <- v_results$se.fit
a_pred$fit <- a_results$fit
a_pred$se <- a_results$se.fit
ggplot() +
# Arousal
geom_line(data = a_pred, aes(x = arousal_scale, y = fit, color = covid_fear_scale), size = 2) +
geom_ribbon(data = a_pred, aes(x = arousal_scale, ymax = fit + se, ymin = fit - se, fill = covid_fear_scale), alpha = .1)
xRange3
xRange3 <- quantile(t$covid_fear_scale, n = 3)
xRange3 <- c(-1, 0, 1)
v_pred <- with(t, expand.grid(valence_scale = xRange1, arousal_scale = 0, covid_fear_scale = xRange3))
a_pred <- with(t, expand.grid(valence_scale = 0, arousal_scale = xRange2, covid_fear_scale = xRange3))
v_results <- AICcmodavg::predictSE(test, newdata = v_pred)
a_results <- AICcmodavg::predictSE(test, newdata = a_pred)
v_pred$fit <- v_results$fit
v_pred$se <- v_results$se.fit
a_pred$fit <- a_results$fit
a_pred$se <- a_results$se.fit
ggplot() +
# Arousal
geom_line(data = a_pred, aes(x = arousal_scale, y = fit, color = covid_fear_scale), size = 2) +
geom_ribbon(data = a_pred, aes(x = arousal_scale, ymax = fit + se, ymin = fit - se, fill = covid_fear_scale), alpha = .1)
ggplot() +
# Arousal
geom_line(data = a_pred, aes(x = arousal_scale, y = fit, color = covid_fear_scale), size = 2)
ggplot() +
# Arousal
geom_line(data = a_pred, aes(x = arousal_scale, y = fit, color = as.factor(covid_fear_scale)), size = 2) +
geom_ribbon(data = a_pred, aes(x = arousal_scale, ymax = fit + se, ymin = fit - se, fill = as.factor(covid_fear_scale)), alpha = .1)
summary(test)
ggplot() +
# Valence
geom_line(data = v_pred, aes(x = valence_scale, y = fit, color = as.factor(covid_fear_scale)), size = 2) +
geom_ribbon(data = v_pred, aes(x = valence_scale, ymax = fit + se, ymin = fit - se, fill = as.factor(covid_fear_scale)), alpha = .1)
summary(m_fig2)
summary(test)
ggplot() +
# Arousal
geom_line(data = a_pred, aes(x = arousal_scale, y = fit, color = as.factor(covid_fear_scale)), size = 2) +
geom_ribbon(data = a_pred, aes(x = arousal_scale, ymax = fit + se, ymin = fit - se, fill = as.factor(covid_fear_scale)), alpha = .1)
ggplot() +
# Valence
geom_line(data = v_pred, aes(x = valence_scale, y = fit, color = as.factor(covid_fear_scale)), size = 2) +
geom_ribbon(data = v_pred, aes(x = valence_scale, ymax = fit + se, ymin = fit - se, fill = as.factor(covid_fear_scale)), alpha = .1)
t <- fig2_data %>% filter(intervention == "prosocial")
test <- lme(willingness_scale ~ valence_scale*covid_fear_scale + arousal_scale*covid_fear_scale, random = ~ 1| sub,
data = t)
summary(test)
# make new dataframe
range_valence <- range(t$valence_scale) # fig2_data already defined previously
range_arousal <- range(t$arousal_scale)
range_covid_fear <- range(t$covid_fear_scale)
xRange1 <- seq(range_valence[1], range_valence[2], by = .1)
xRange2 <- seq(range_arousal[1], range_arousal[2], by = .1)
xRange3 <- c(-1, 0, 1)
v_pred <- with(t, expand.grid(valence_scale = xRange1, arousal_scale = 0, covid_fear_scale = xRange3))
a_pred <- with(t, expand.grid(valence_scale = 0, arousal_scale = xRange2, covid_fear_scale = xRange3))
v_results <- AICcmodavg::predictSE(test, newdata = v_pred)
a_results <- AICcmodavg::predictSE(test, newdata = a_pred)
v_pred$fit <- v_results$fit
v_pred$se <- v_results$se.fit
a_pred$fit <- a_results$fit
a_pred$se <- a_results$se.fit
ggplot() +
# Arousal
geom_line(data = a_pred, aes(x = arousal_scale, y = fit, color = as.factor(covid_fear_scale)), size = 2) +
geom_ribbon(data = a_pred, aes(x = arousal_scale, ymax = fit + se, ymin = fit - se, fill = as.factor(covid_fear_scale)), alpha = .1)
ggplot() +
# Valence
geom_line(data = v_pred, aes(x = valence_scale, y = fit, color = as.factor(covid_fear_scale)), size = 2) +
geom_ribbon(data = v_pred, aes(x = valence_scale, ymax = fit + se, ymin = fit - se, fill = as.factor(covid_fear_scale)), alpha = .1)
m_fig2 <- nlme::lme(willingness_scale ~ intervention*valence_scale*covid_fear_scale + intervention*arousal_scale*covid_fear_scale, random = ~ 1 + intervention| sub,
data = fig2_data)
summary(m_fig2)
m_fig2 <- nlme::lme(willingness_scale ~ intervention_opp*valence_scale*covid_fear_scale + intervention_opp*arousal_scale*covid_fear_scale, random = ~ 1 + intervention_opp| sub,
data = fig2_data)
summary(m_fig2)
library(readxl)
original_study_values <- read_excel("~/Dropbox (Brown)/JOEY/Coding Tutorials/Computational_modeling_tutorial/Joey/Prospect theory/Analysis/data/original_study_values.xlsx")
View(original_study_values)
library(readr)
pt_replication_modified_exclusions_data <- read_csv("~/Dropbox (Brown)/JOEY/Coding Tutorials/Computational_modeling_tutorial/Joey/Prospect theory/Analysis/data/modified_exclusions/pt_replication_modified_exclusions_data.csv")
View(pt_replication_modified_exclusions_data)
library(readr)
pt_replication_preregistered_exclusions_data <- read_csv("~/Dropbox (Brown)/JOEY/Coding Tutorials/Computational_modeling_tutorial/Joey/Prospect theory/Analysis/data/preregistered_exclusions/pt_replication_preregistered_exclusions_data.csv")
View(pt_replication_preregistered_exclusions_data)
library(tidyverse)
df <- pt_replication_modified_exclusions_data %>%
select(`1`:`17` , Presentation_Order)
df <- pt_replication_modified_exclusions_data %>%
mutate(sub = row_number())
df <- pt_replication_modified_exclusions_data %>%
mutate(sub = row_number())
# Order
pt_trial_order <- pt_replication_modified_exclusions_data %>%
select(sub, order = Presentation_Order) %>%
separate_rows(order) %>%
group_by(sub) %>%
mutate(trial = row_number()) %>%
ungroup() %>%
mutate(order = str_to_lower(order))
library(tidyverse)
df <- pt_replication_modified_exclusions_data %>%
mutate(sub = row_number())
# Order
pt_trial_order <- df %>%
select(sub, order = Presentation_Order) %>%
separate_rows(order) %>%
group_by(sub) %>%
mutate(trial = row_number()) %>%
ungroup() %>%
mutate(order = str_to_lower(order))
View(pt_trial_order)
# Tidy
df %>%
select(sub, `1`:`17`) %>%
# Add trial numbers
inner_join(., pt_trial_order)
# Tidy
df %>%
select(sub, `1`:`17`) %>%
pivot_longer(-sub) %>%
# Add trial numbers
inner_join(., pt_trial_order)
df %>%
select(sub, `1`:`17`) %>%
pivot_longer(-sub)
# Tidy
df %>%
select(sub, `1`:`17`) %>%
pivot_longer(-sub, names_to = "gamble_number") %>%
# Add trial numbers
inner_join(., pt_trial_order)
# Order
pt_trial_order <- df %>%
select(sub, order = Presentation_Order) %>%
separate_rows(order) %>%
group_by(sub) %>%
mutate(trial = row_number()) %>%
ungroup() %>%
mutate(gamble_number = str_to_lower(order))
# Tidy
df %>%
select(sub, `1`:`17`) %>%
pivot_longer(-sub, names_to = "gamble_number") %>%
# Add trial numbers
inner_join(., pt_trial_order)
# Order
pt_trial_order <- df %>%
select(sub, gamble_number = Presentation_Order) %>%
separate_rows(order) %>%
group_by(sub) %>%
mutate(trial = row_number()) %>%
ungroup() %>%
mutate(gamble_number = str_to_lower(gamble_number))
# Tidy
df %>%
select(sub, `1`:`17`) %>%
pivot_longer(-sub, names_to = "gamble_number") %>%
# Add trial numbers
inner_join(., pt_trial_order, by = c("sub", "gamble_number"))
# Order
pt_trial_order <- df %>%
select(sub, gamble_number = Presentation_Order) %>%
separate_rows(order) %>%
group_by(sub) %>%
mutate(trial = row_number()) %>%
ungroup() %>%
mutate(gamble_number = str_to_lower(gamble_number))
# Order
pt_trial_order <- df %>%
select(sub, gamble_number = Presentation_Order) %>%
separate_rows(gamble_number) %>%
group_by(sub) %>%
mutate(trial = row_number()) %>%
ungroup() %>%
mutate(gamble_number = str_to_lower(gamble_number))
# Tidy
df %>%
select(sub, `1`:`17`) %>%
pivot_longer(-sub, names_to = "gamble_number") %>%
# Add trial numbers
inner_join(., pt_trial_order, by = c("sub", "gamble_number"))
# Tidy
df %>%
select(sub, `1`:`17`) %>%
pivot_longer(-sub, names_to = "gamble_number", values_to = "choice") %>%
# Add trial numbers
inner_join(., pt_trial_order, by = c("sub", "gamble_number"))
View(original_study_values)
View(pt_trial_order)
View(pt_replication_preregistered_exclusions_data)
library(readxl)
data_column_key <- read_excel("~/Dropbox (Brown)/JOEY/Coding Tutorials/Computational_modeling_tutorial/Joey/Prospect theory/Analysis/data/data_column_key.xlsx")
View(data_column_key)
# Key
data_key <- data_column_key %>%
filter(`Column name` %in% c(1:17))
data_key
# Key
data_key <- data_column_key %>%
filter(`Column name` %in% c(1:17)) %>%
rename(gamble_number = `Column name`)
data_key
# Key
data_key <- data_column_key %>%
filter(`Column name` %in% c(1:17)) %>%
select(gamble_number = `Column name`, question_text = `Question text`)
# Tidy
df %>%
select(sub, `1`:`17`) %>%
pivot_longer(-sub, names_to = "gamble_number", values_to = "choice") %>%
# Add trial numbers
inner_join(., pt_trial_order, by = c("sub", "gamble_number")) %>%
# Add info
inner_join(., data_key, by = "gamble_number")
# Tidy
df %>%
select(sub, `1`:`17`) %>%
pivot_longer(-sub, names_to = "gamble_number", values_to = "choice") %>%
# Recode choice
mutate(choice_label = case_when(choice == 0 ~ "A", choice == 1 ~ "B")) %>%
# Add trial numbers
inner_join(., pt_trial_order, by = c("sub", "gamble_number")) %>%
# Add info
inner_join(., data_key, by = "gamble_number")
names(original_study_values)
# Gamble data
gamble_values <- original_study_values %>%
select(gamble_number = `...1`, value_A = `Value A`, value_B = `Value B`, prob_A = `Probability A`, prob_B = `Probability B`,
ev_A = `Expected Value A`, ev_B = `Expected Value B`)
gamble_values
# Tidy
df %>%
select(sub, `1`:`17`) %>%
pivot_longer(-sub, names_to = "gamble_number", values_to = "choice") %>%
# Recode choice
mutate(choice_label = case_when(choice == 1 ~ "A", choice == 0 ~ "B")) %>%
# Add trial numbers
inner_join(., pt_trial_order, by = c("sub", "gamble_number")) %>%
# Add info
inner_join(., gamble_values, by = "gamble_number")
class(gamble_values$gamble_number)
# Gamble data
gamble_values <- original_study_values %>%
select(gamble_number = as.character(`...1`), value_A = `Value A`, value_B = `Value B`, prob_A = `Probability A`, prob_B = `Probability B`,
ev_A = `Expected Value A`, ev_B = `Expected Value B`)
# Gamble data
gamble_values <- original_study_values %>%
select(gamble_number = `...1`, value_A = `Value A`, value_B = `Value B`, prob_A = `Probability A`, prob_B = `Probability B`,
ev_A = `Expected Value A`, ev_B = `Expected Value`) %>%
mutate(gamble_number = as.character(gamble_number))
gamble_values <- original_study_values %>%
select(gamble_number = `...1`, value_A = `Value A`, value_B = `Value B`, prob_A = `Probability A`, prob_B = `Probability B`,
ev_A = `Expected Value A`, ev_B = `Expected Value`)
original_study_values
# Gamble data
gamble_values <- original_study_values %>%
select(gamble_number = `...1`, value_A = `Value A`, value_B = `Value B`, prob_A = `Probability A`, prob_B = `Probability B`,
ev_A = `Expected Value A`, ev_B = `Expected Value`)
# Gamble data
gamble_values <- original_study_values %>%
select(gamble_number = `...1`, value_A = `Value A`, value_B = `Value B`, prob_A = `Probability A`, prob_B = `Probability B`,
ev_A = `Expected Value A`, ev_B = `Expected Value B`) %>%
mutate(gamble_number = as.character(gamble_number))
# Tidy
df %>%
select(sub, `1`:`17`) %>%
pivot_longer(-sub, names_to = "gamble_number", values_to = "choice") %>%
# Recode choice
mutate(choice_label = case_when(choice == 1 ~ "A", choice == 0 ~ "B")) %>%
# Add trial numbers
inner_join(., pt_trial_order, by = c("sub", "gamble_number")) %>%
# Add info
inner_join(., data_key, by = "gamble_number")
# Tidy
df %>%
select(sub, `1`:`17`) %>%
pivot_longer(-sub, names_to = "gamble_number", values_to = "choice") %>%
# Recode choice
mutate(choice_label = case_when(choice == 1 ~ "A", choice == 0 ~ "B")) %>%
# Add trial numbers
inner_join(., pt_trial_order, by = c("sub", "gamble_number")) %>%
# Add info
inner_join(., gamble_values, by = "gamble_number")
# Tidy
df %>%
select(sub, `1`:`17`) %>%
pivot_longer(-sub, names_to = "gamble_number", values_to = "choice") %>%
# Recode choice
mutate(choice_label = case_when(choice == 1 ~ "A", choice == 0 ~ "B")) %>%
# Add trial numbers
inner_join(., pt_trial_order, by = c("sub", "gamble_number")) %>%
# Add info
inner_join(., gamble_values, by = "gamble_number") %>%
# Arrange
group_by(sub) %>% arrange(trial)
# Tidy
df %>%
select(sub, `1`:`17`) %>%
pivot_longer(-sub, names_to = "gamble_number", values_to = "choice") %>%
# Recode choice
mutate(choice_label = case_when(choice == 1 ~ "A", choice == 0 ~ "B")) %>%
# Add trial numbers
inner_join(., pt_trial_order, by = c("sub", "gamble_number")) %>%
# Add info
inner_join(., gamble_values, by = "gamble_number") %>%
# Arrange
group_by(sub) %>% arrange(sub, trial)
# Tidy
df %>%
select(sub, `1`:`17`) %>%
pivot_longer(-sub, names_to = "gamble_number", values_to = "choice") %>%
# Recode choice
mutate(choice_label = case_when(choice == 1 ~ "A", choice == 0 ~ "B")) %>%
# Add trial numbers
inner_join(., pt_trial_order, by = c("sub", "gamble_number")) %>%
# Add info
inner_join(., gamble_values, by = "gamble_number") %>%
# Arrange
arrange(sub, trial)
1E-3
# Tidy
df %>%
select(sub, `1`:`17`) %>%
pivot_longer(-sub, names_to = "gamble_number", values_to = "choice") %>%
# Recode choice
mutate(choice_label = case_when(choice == 1 ~ "A", choice == 0 ~ "B")) %>%
# Add trial numbers
inner_join(., pt_trial_order, by = c("sub", "gamble_number")) %>%
# Add info
inner_join(., gamble_values, by = "gamble_number") %>%
# Arrange
arrange(sub, trial) %>%
write_csv(path = "~/Dropbox (Brown)/JOEY/Coding Tutorials/Computational_modeling_tutorial/Data/prospect_theory/pt_replication.csv")
